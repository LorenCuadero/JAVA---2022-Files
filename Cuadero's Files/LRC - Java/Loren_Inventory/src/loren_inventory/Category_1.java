/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package loren_inventory;

import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.sql.DriverManager;
import java.sql.Connection;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import Connection.connect;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author student.admin
 */
public class Category_1 extends javax.swing.JFrame {

    java.sql.Connection con;
    PreparedStatement pst;

    public Category_1() {
        initComponents();
        this.setLocationRelativeTo(null); // center form on the screen
        String url = "jdbc:mysql://localhost/super mall";
        String user = "root";
        String pass = "";
        try {
            con = DriverManager.getConnection(url, user, pass);
        } catch (Exception ex) {
            System.out.println("Error : " + ex.getMessage());
        }
        table_update();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jprod = new javax.swing.JTextField();
        jadd = new javax.swing.JButton();
        jdel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jstat = new javax.swing.JComboBox<>();
        jupdate = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jcat = new javax.swing.JTextField();
        jview = new javax.swing.JButton();
        jview1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel2.setFont(new java.awt.Font("Bookman Old Style", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("/-\\ STR0 ");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Star Merchandise Inventory System");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 70)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("|");

        jLabel5.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 51));
        jLabel5.setText("Category ");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Product");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("POS");
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Exit");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Cashier ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(37, 37, 37)
                .addComponent(jLabel7)
                .addGap(33, 33, 33)
                .addComponent(jLabel8)
                .addGap(28, 28, 28)
                .addComponent(jLabel9)
                .addGap(26, 26, 26)
                .addComponent(jLabel10)
                .addGap(57, 57, 57))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel7)
                                .addComponent(jLabel8)
                                .addComponent(jLabel9)
                                .addComponent(jLabel10))
                            .addComponent(jLabel3))
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel2)))
                .addGap(38, 38, 38))
        );

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 18)); // NOI18N
        jLabel1.setText("Category ");

        jLabel11.setFont(new java.awt.Font("Bookman Old Style", 1, 8)); // NOI18N
        jLabel11.setText("_______________________________________________________________________________________________________________________________________________________");

        jLabel12.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel12.setText("Product Id : ");

        jLabel13.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel13.setText("Status :");

        jprod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jprodActionPerformed(evt);
            }
        });

        jadd.setText("Add");
        jadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jaddActionPerformed(evt);
            }
        });

        jdel.setText("Delete");
        jdel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdelActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Product Id", "Category", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jstat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "DeActive" }));
        jstat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jstatActionPerformed(evt);
            }
        });

        jupdate.setText("Update");
        jupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jupdateActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel14.setText("Category : ");

        jcat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcatActionPerformed(evt);
            }
        });

        jview.setText("View Table");
        jview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jviewActionPerformed(evt);
            }
        });

        jview1.setText("Refresh");
        jview1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jview1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jview)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jview1)
                .addGap(445, 445, 445))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(90, 90, 90)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(19, 19, 19)
                                        .addComponent(jprod, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(90, 90, 90)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(19, 19, 19)
                                        .addComponent(jcat, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(100, 100, 100)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(9, 9, 9)
                                        .addComponent(jstat, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(178, 178, 178)
                                        .addComponent(jadd, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(17, 17, 17)
                                        .addComponent(jdel)))
                                .addGap(247, 247, 247))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1018, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jprod, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jcat, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jstat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jadd)
                            .addComponent(jupdate)
                            .addComponent(jdel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jview)
                    .addComponent(jview1))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void table_update() {
        String sql = "SELECT * FROM category";
        int c;
        try {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            ResultSetMetaData rsd = rs.getMetaData();
            c = rsd.getColumnCount();

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            while (rs.next()) {
                model.addRow(new String[]{rs.getString(1), rs.getString(2), rs.getString(3)});
                Vector v2 = new Vector();

                for (int i = 1; i <= c; i++) {
                    v2.add(rs.getString("Product_Id "));
                    v2.add(rs.getString("Category "));
                    v2.add(rs.getString("Status"));

                }

                model.addRow(v2);

            }
        } catch (Exception ex) {
            System.out.println("Error : " + ex.getMessage());
        }
    }

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        Category_1 c = new Category_1();
        c.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        Product p = new Product();
        p.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        POS po = new POS();
        po.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jaddActionPerformed
        String prod = jprod.getText();
        String name = jcat.getText();
        String status = jstat.getSelectedItem().toString();

        if (name.equals("")) {
            JOptionPane.showMessageDialog(null, "Add A Product Category");
        } else if (checkUsername(name)) {
            JOptionPane.showMessageDialog(null, "This Category Already Exist");
        } else if (checkProdId(prod)) {
            JOptionPane.showMessageDialog(null, "This Product Id Already Exist");
        } else if (status.equals("Active")) {
            JOptionPane.showMessageDialog(null, "Reminder: You are adding an Active Category");

            PreparedStatement ps;
            String query = "INSERT INTO `category`(`Product_Id`,`Category`, `Status`) VALUES (?,?,?)";

            try {
                ps = connect.getConnection().prepareStatement(query);

                ps.setString(1, prod);
                ps.setString(2, name);
                ps.setString(3, status);

                if (ps.executeUpdate() > 0) {
                    JOptionPane.showMessageDialog(null, "Successfully Added");
                    table_update();
                }

            } catch (SQLException ex) {
                Logger.getLogger(Category_1.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (!status.equals("Active")) {
            JOptionPane.showMessageDialog(null, "Reminder: You are adding a DeActive Category");
            PreparedStatement ps;
            String query = "INSERT INTO `category`(`Product_Id`,`Category`, `Status`) VALUES (?,?,?)";

            try {
                ps = connect.getConnection().prepareStatement(query);

                ps.setString(1, prod);
                ps.setString(2, name);
                ps.setString(3, status);

                if (ps.executeUpdate() > 0) {
                    JOptionPane.showMessageDialog(null, "Successfully Added");
                    table_update();
                }

            } catch (SQLException ex) {
                Logger.getLogger(Category_1.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            PreparedStatement ps;
            String query = "INSERT INTO `category`(`Product_Id`,`Category`, `Status`) VALUES (?,?,?)";

            try {
                ps = connect.getConnection().prepareStatement(query);

                ps.setString(1, name);
                ps.setString(2, status);

                if (ps.executeUpdate() > 0) {
                    JOptionPane.showMessageDialog(null, "New Category Added");
                    table_update();
                }

            } catch (SQLException ex) {
                Logger.getLogger(Category_1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
//
//
    }//GEN-LAST:event_jaddActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        Home h = new Home();
        h.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jprodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jprodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jprodActionPerformed

    private void jstatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jstatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jstatActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

//        table_update();
        DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
        try {
            int selectIndex = jTable1.getSelectedRow();
            String prod = jprod.getText();
            String name = jcat.getText();
            String status = jstat.getSelectedItem().toString();

            jprod.setText(model1.getValueAt(selectIndex, 0).toString());
            jcat.setText(model1.getValueAt(selectIndex, 1).toString());
            jstat.setSelectedItem(model1.getValueAt(selectIndex, 2).toString());
        } catch (ArrayIndexOutOfBoundsException ar) {
//
//        }
//  try {
//            int selectIndex = jTable1.getSelectedRow();
//
//            jprod.setText(jTable1.getValueAt(selectIndex, 3).toString());
//            jstat.setSelectedItem(jTable1.getValueAt(selectIndex, 3).toString());
//
//        } catch (ArrayIndexOutOfBoundsException ar) {
//
//        }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jupdateActionPerformed

        String prod = jprod.getText();
        String name = jcat.getText();
        String status = jstat.getSelectedItem().toString();

        if (name.equals("")) {
            JOptionPane.showMessageDialog(null, "Add A Product Category");
        } else if (checkUsername(name)) {
            JOptionPane.showMessageDialog(null, "This Category Already Exist");
        } else if (checkProdId(prod)) {
            JOptionPane.showMessageDialog(null, "Please add another Product Id in updating");
        } else if (status.equals("Active")) {
            JOptionPane.showMessageDialog(null, "Reminder: You are adding an Active Category");

            PreparedStatement ps;
            String query = "INSERT INTO `category`(`Product_Id`,`Category`, `Status`) VALUES (?,?,?)";

            try {
                ps = connect.getConnection().prepareStatement(query);

                ps.setString(1, prod);
                ps.setString(2, name);
                ps.setString(3, status);

                if (ps.executeUpdate() > 0) {
                    JOptionPane.showMessageDialog(null, "Successfully Updated");
                    table_update();
                }

            } catch (SQLException ex) {
                Logger.getLogger(Category_1.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (!status.equals("Active")) {
            JOptionPane.showMessageDialog(null, "Reminder: You are adding a DeActive Category");
            PreparedStatement ps;
            String query = "INSERT INTO `category`(`Product_Id`,`Category`, `Status`) VALUES (?,?,?)";

            try {
                ps = connect.getConnection().prepareStatement(query);

                ps.setString(1, prod);
                ps.setString(2, name);
                ps.setString(3, status);

                if (ps.executeUpdate() > 0) {
                    JOptionPane.showMessageDialog(null, "Successfully Updated");
                    table_update();
                }

            } catch (SQLException ex) {
                Logger.getLogger(Category_1.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            PreparedStatement ps;
            String query = "INSERT INTO `category`(`Product_Id`,`Category`, `Status`) VALUES (?,?,?)";

            try {
                ps = connect.getConnection().prepareStatement(query);

                ps.setString(1, prod);
                ps.setString(2, name);
                ps.setString(3, status);

                if (ps.executeUpdate() > 0) {
                    JOptionPane.showMessageDialog(null, "New Category Added");
                    table_update();
                }

            } catch (SQLException ex) {
                Logger.getLogger(Category_1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        /////////////New ////////////////////////////////
//DefaultTableModel model2 = (DefaultTableModel) jTable1.getModel();
//    
//            int selectIndex = jTable1.getSelectedRow();
//            
//
//
//            String name = jcat.getText();
//            String status = jstat.getSelectedItem().toString();
//            String prod = jprod.getText();
//            
//           try {
//               int d = Integer.parseInt(model2.getValueAt(selectIndex, 0).toString());
//            Class.forName("com.mysql.cj.jdbc.Driver");
//            con = DriverManager.getConnection("jdbc:mysql://localhost/super mall", "root", "");
//            pst = con.prepareStatement("update category set Product_Id=?, Category=?, Status=? where d=? ");
//            pst.setString(1, prod);
//            pst.setString(2, name);
//            pst.setString(3, status);
//            pst.setInt(4, d);
//            pst.executeUpdate();
//            JOptionPane.showMessageDialog(null, "Succesfully Updated");
//            table_update();
//            jprod.setText("");
//            jcat.setText("");
//            jstat.setSelectedIndex(-1);
//            jprod.requestFocus();
//        } catch (Exception ex) {
//            System.out.println(ex.getMessage());
//        }
//            
    }//GEN-LAST:event_jupdateActionPerformed

    private void jdelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdelActionPerformed

        DefaultTableModel model2 = (DefaultTableModel) jTable1.getModel();
//    
        int selectIndex = jTable1.getSelectedRow();

        int d = Integer.parseInt(model2.getValueAt(selectIndex, 0).toString());

        
        int dialogResult = JOptionPane.showConfirmDialog(null, "Do you want to Delete the Record? " , "Warning" , JOptionPane.YES_NO_OPTION);
        
        if(dialogResult == JOptionPane.YES_OPTION){
        try {
            PreparedStatement ps;
            String sql;
            sql = "DELETE FROM `category` WHERE `Product_Id`=?";

            con = DriverManager.getConnection("jdbc:mysql://localhost/super mall", "root", "");
            ps = con.prepareStatement(sql);

            ps.setString(1, jprod.getText());
            jprod.setText("");
            jcat.setText("");

            ps.executeUpdate();

            JOptionPane.showMessageDialog(null, "Successfully Deleted!");

        } catch (SQLException ex) {
            Logger.getLogger(Category_1.class.getName()).log(Level.SEVERE, null, ex);
        }}
///////////////////inventory people///////////////////////////////////////////////////////
//        try {
//            PreparedStatement ps;
//            String sql;
//             sql = "DELETE FROM category WHERE Product_Id =? , Category =? , Status=? ";
//             con = DriverManager.getConnection("jdbc:mysql://localhost/super mall", "root", "");
//             ps = con.prepareStatement(sql);
//            ps.setString(1, jprod.getText());
//             ps.setString(2, jcat.getText());
//             ps.setString(3, jstat.getSelectedItem().toString());
//             ps.executeUpdate();
//     
////             JOptionPane.showMessageDialog(null, "Successfully Deleted!");
//                
//            
//                      
//        } catch (SQLException ex) {
//            Logger.getLogger(Category_1.class.getName()).log(Level.SEVERE, null, ex);
//        }
//       ///////////////////cashiers///////////////////////////////////////////////////////
//        try {
//            PreparedStatement ps;
//            String sql;
//             sql = "DELETE FROM category WHERE Product_Id =? , Category =? , Status=?";
//             con = DriverManager.getConnection("jdbc:mysql://localhost/super mall", "root", "");
//             ps = con.prepareStatement(sql);
//             ps.setString(1, jprod.getText());
//             ps.setString(2, jcat.getText());
//             ps.setString(3, jstat.getSelectedItem().toString());
//             ps.executeUpdate();
//     
////             JOptionPane.showMessageDialog(null, "Successfully Deleted!");
//                
//            
//                      
//        } catch (SQLException ex) {
//            Logger.getLogger(Category_1.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        

//// get jtab;e model first
//        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
//        String name = jprod.getText();
//        String status = jstat.getSelectedItem().toString();
//        String prod = jprod.getText();
////// delete row 
//        if (jTable1.getSelectedRowCount() == 1) {
////// if single row is selected then delete
//
//            PreparedStatement ps;
//            String query = "DELETE INTO `category` (`Product_Id`,`Category`, `Status`) VALUES (?,?,?)";
//            tblModel.removeRow(jTable1.getSelectedRow());
//
//            try {
//                ps = connect.getConnection().prepareStatement(query);
//
//                ps.setString(1, prod);
//                ps.setString(2, name);
//                ps.setString(3, status);
//
//                if (ps.executeUpdate() > 0) {
//                    JOptionPane.showMessageDialog(null, "Successfully Deleted");
//                    table_update();
//                }
//
//            } catch (SQLException ex) {
//                Logger.getLogger(Category_1.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        } else {
//            if (jTable1.getRowCount() == 0) {
//                // if table is empty (no data) then display message
//                JOptionPane.showMessageDialog(this, "Table is empty");
//            } else {
//                // if table is not 5empty but row is not selected or multiple row is selected
//                JOptionPane.showMessageDialog(this, "Please select a single row only to delete.");
//
//            }
//
//        }
//
////            String sql = "DELETE INTO `category` (`Product_Id`,`Category`, `Status`) VALUES (?,?,?)";
////
////        try {
////            PreparedStatement ps = null;
////            pst = con.prepareStatement(sql);
////            pst.execute();
////            ps.setString(1, prod);
////            ps.setString(2, name);
////            ps.setString(3, status);
////            JOptionPane.showMessageDialog(null, "Category Deleted");
////        } catch (Exception ex) {
////            JOptionPane.showMessageDialog(null, ex);
////
////        }
    }//GEN-LAST:event_jdelActionPerformed

    private void jcatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcatActionPerformed

    private void jviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jviewActionPerformed
        String sql = "SELECT * FROM category";
        try {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new String[]{rs.getString(1), rs.getString(2), rs.getString(3)});
            }
        } catch (Exception ex) {
            System.out.println("Error : " + ex.getMessage());
        }
    }//GEN-LAST:event_jviewActionPerformed

    private void jview1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jview1ActionPerformed
        String sql = "SELECT * FROM category";
        try {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new String[]{rs.getString(1), rs.getString(2), rs.getString(3)});
            }
        } catch (Exception ex) {
            System.out.println("Error : " + ex.getMessage());
        }
    }//GEN-LAST:event_jview1ActionPerformed
    public boolean checkUsername(String Category) {
        PreparedStatement ps;
        ResultSet rs;
        boolean checkUser = false;
        String query = "SELECT * FROM `category` WHERE `Category` =?";
        try {
            ps = connect.getConnection().prepareStatement(query);
            ps.setString(1, Category);

            rs = ps.executeQuery();

            if (rs.next()) {
                checkUser = true;
            }
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(Category_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        return checkUser;
    }

    public boolean checkProdId(String Product_Id) {
        PreparedStatement ps;
        ResultSet rs;
        boolean checkUser = false;
        String query = "SELECT * FROM `category` WHERE `Product_Id` =?";
        try {
            ps = connect.getConnection().prepareStatement(query);
            ps.setString(1, Product_Id);

            rs = ps.executeQuery();

            if (rs.next()) {
                checkUser = true;
            }
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(Category_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        return checkUser;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Category_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Category_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Category_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Category_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Category_1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jadd;
    private javax.swing.JTextField jcat;
    private javax.swing.JButton jdel;
    private javax.swing.JTextField jprod;
    private javax.swing.JComboBox<String> jstat;
    private javax.swing.JButton jupdate;
    private javax.swing.JButton jview;
    private javax.swing.JButton jview1;
    // End of variables declaration//GEN-END:variables
}
